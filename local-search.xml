<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>工厂方法</title>
    <link href="/2025/04/27/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <url>/2025/04/27/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>工厂方法（Factory Method）是一种创建型设计模式 ，它提供了一种创建对象的方式，同时将具体实现的细节延迟到子类中。通过这种方式，工厂方法允许代码在不指定具体类的情况下创建对象，从而增强了代码的灵活性和可扩展性。</p><p>工厂方法的核心思想是将对象的创建过程封装在一个方法中，这个方法被称为“工厂方法”。具体来说：</p><p>定义一个用于创建对象的接口 ：父类定义一个抽象方法（即工厂方法），但不实现具体的对象创建逻辑。<br><br>让子类决定实例化哪一个类 ：子类负责实现工厂方法，决定如何创建具体的对象。<br><br>通过这种方式，工厂方法模式实现了多态性 ，使得客户端代码可以依赖于抽象接口，而不必关心具体类的实现。<br></p>]]></content>
    
    
    <categories>
      
      <category>cs61b</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>cs61b</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可以开始写博客了</title>
    <link href="/2025/04/26/%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%86/"/>
    <url>/2025/04/26/%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>以后可以在这里写博客了!!!<br>这是好的</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>神秘测试文章</title>
    <link href="/2025/04/26/%E7%A5%9E%E7%A7%98%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/26/%E7%A5%9E%E7%A7%98%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>并非很神秘的测试文章</p><img src="/2025/04/26/%E7%A5%9E%E7%A7%98%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="神秘测试图片">]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神秘</tag>
      
      <tag>诡谲</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
